/*
 * Autopsy Forensic Browser
 * 
 * Copyright 2011 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.sleuthkit.autopsy.keywordsearch;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import org.sleuthkit.autopsy.coreutils.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import org.sleuthkit.autopsy.corecomponents.OptionsPanel;
import org.sleuthkit.autopsy.coreutils.StringExtract.StringExtractUnicodeTable.SCRIPT;

/**
 * Simple ingest config panel
 */
public class KeywordSearchIngestSimplePanel extends javax.swing.JPanel implements OptionsPanel, PropertyChangeListener {
    
    private final static Logger logger = Logger.getLogger(KeywordSearchIngestSimplePanel.class.getName());
    public static final String PROP_OPTIONS = "Keyword Search_Options";
    private KeywordListTableModel tableModel;
    private KeywordSearchConfigController controller;

    /** Creates new form KeywordSearchIngestSimplePanel */
    public KeywordSearchIngestSimplePanel() {
        this(new KeywordSearchConfigController());
    }
    
    public KeywordSearchIngestSimplePanel(KeywordSearchConfigController controller) {
        tableModel = new KeywordListTableModel();
        setController(controller);
        initComponents();
        customizeComponents();
    }

    public final void setController(KeywordSearchConfigController controller) {
        this.controller = controller;
        tableModel.setController(controller);
        controller.addPropertyChangeListener(this);
    }
    
    private void customizeComponents() {
        listsTable.setModel(tableModel);
        
        listsTable.setTableHeader(null);
        listsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //customize column witdhs
        final int width = listsScrollPane.getPreferredSize().width;
        listsTable.setAutoResizeMode(JTable.AUTO_RESIZE_NEXT_COLUMN);
        TableColumn column = null;
        for (int i = 0; i < listsTable.getColumnCount(); i++) {
            column = listsTable.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(((int) (width * 0.07)));
            } else {
                column.setPreferredWidth(((int) (width * 0.92)));
            }
        }
        
        reloadLangs();
        reloadEncodings();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listsScrollPane = new javax.swing.JScrollPane();
        listsTable = new javax.swing.JTable();
        titleLabel = new javax.swing.JLabel();
        languagesLabel = new javax.swing.JLabel();
        languagesValLabel = new javax.swing.JLabel();
        encodingsLabel = new javax.swing.JLabel();
        keywordSearchEncodings = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(300, 170));

        listsScrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        listsScrollPane.setPreferredSize(new java.awt.Dimension(300, 100));

        listsTable.setBackground(new java.awt.Color(240, 240, 240));
        listsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        listsTable.setShowHorizontalLines(false);
        listsTable.setShowVerticalLines(false);
        listsScrollPane.setViewportView(listsTable);

        titleLabel.setText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, "KeywordSearchIngestSimplePanel.titleLabel.text")); // NOI18N

        languagesLabel.setText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, "KeywordSearchIngestSimplePanel.languagesLabel.text")); // NOI18N
        languagesLabel.setToolTipText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, "KeywordSearchIngestSimplePanel.languagesLabel.toolTipText")); // NOI18N

        languagesValLabel.setText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, "KeywordSearchIngestSimplePanel.languagesValLabel.text")); // NOI18N
        languagesValLabel.setToolTipText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, "KeywordSearchIngestSimplePanel.languagesValLabel.toolTipText")); // NOI18N

        encodingsLabel.setText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, "KeywordSearchIngestSimplePanel.encodingsLabel.text")); // NOI18N

        keywordSearchEncodings.setText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, "KeywordSearchIngestSimplePanel.keywordSearchEncodings.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(languagesLabel)
                    .addComponent(titleLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(encodingsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(keywordSearchEncodings))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(languagesValLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(languagesLabel)
                .addGap(13, 13, 13)
                .addComponent(languagesValLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encodingsLabel)
                    .addComponent(keywordSearchEncodings))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel encodingsLabel;
    private javax.swing.JLabel keywordSearchEncodings;
    private javax.swing.JLabel languagesLabel;
    private javax.swing.JLabel languagesValLabel;
    private javax.swing.JScrollPane listsScrollPane;
    private javax.swing.JTable listsTable;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    private void reloadLangs() {
        //TODO multiple
        List<SCRIPT> scripts = controller.getStringExtractScripts();
        StringBuilder langs = new StringBuilder();
        langs.append("<html>");
        for(int i=0; i<scripts.size(); i++) {
            langs.append(scripts.get(i).toString());
            if(i+1 < scripts.size()) {
                langs.append(", ");
            }
        }
        langs.append("</html>");
        String langsS = langs.toString();
        this.languagesValLabel.setText(langsS);
        this.languagesValLabel.setToolTipText(langsS);
    }
    
    private void reloadEncodings() {
        boolean utf8 = controller.isStringExtractOptionSet(AbstractFileExtract.ExtractOptions.EXTRACT_UTF8);
        boolean utf16 = controller.isStringExtractOptionSet(AbstractFileExtract.ExtractOptions.EXTRACT_UTF16);

        ArrayList<String> encodingsList = new ArrayList<String>();
        if (utf8) {
            encodingsList.add("UTF8");
        }
        if (utf16) {
            encodingsList.add("UTF16");
        }
        String encodings = encodingsList.toString();
        encodings = encodings.substring(1, encodings.length()-1);
        keywordSearchEncodings.setText(encodings);
    }
    
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        String propName = evt.getPropertyName();
        if (propName.equals(KeywordSearchConfigController.KEYWORD_LISTS)) {
            tableModel.fireTableDataChanged();
        } else if (propName.equals(KeywordSearchConfigController.SCRIPTS)) {
            reloadLangs();
        } else if (propName.equals(KeywordSearchConfigController.STRING_EXTRACT_OPTIONS)) {
            reloadEncodings();
        }
    }

    @Override
    public void store() {
        // simple panel does not need to save anything; already saved in controller
    }

    @Override
    public void load() {
        reloadLangs();
        reloadEncodings();
        tableModel.fireTableDataChanged();
    }

    private class KeywordListTableModel extends AbstractTableModel implements PropertyChangeListener {
        
        private KeywordSearchConfigController controller;
        
        public void setController(KeywordSearchConfigController controller){
            this.controller = controller;
            fireTableDataChanged();
        }

        @Override
        public int getRowCount() {
            return controller.getKeywordSearchListNames().size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            KeywordSearchListsAbstract.KeywordSearchList list = controller.getKeywordSearchLists().get(rowIndex);
            Object obj = (columnIndex == 0) ? list.getUseForIngest() : list.getName();
            return obj;
        }
        
        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 0;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            
            if (columnIndex != 0) {
                return;
            }
            
            KeywordSearchListsAbstract.KeywordSearchList list = controller.getKeywordSearchLists().get(rowIndex);

            list.setUseForIngest(((Boolean)aValue).booleanValue());
        }
        
        @Override
        public Class<?> getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            fireTableDataChanged();
        }
        
    }
}
